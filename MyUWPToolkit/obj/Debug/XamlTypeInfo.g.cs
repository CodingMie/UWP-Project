//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MyUWPToolkit.MyUWPToolkit_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","14.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace MyUWPToolkit.MyUWPToolkit_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[86];
            _typeNameTable[0] = "MyUWPToolkit.ColumnChart";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[3] = "Double";
            _typeNameTable[4] = "String";
            _typeNameTable[5] = "System.Collections.IEnumerable";
            _typeNameTable[6] = "MyUWPToolkit.CropImageControl";
            _typeNameTable[7] = "Windows.Storage.StorageFile";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "MyUWPToolkit.CropSelection";
            _typeNameTable[10] = "MyUWPToolkit.AspectRatio";
            _typeNameTable[11] = "System.Enum";
            _typeNameTable[12] = "System.ValueType";
            _typeNameTable[13] = "MyUWPToolkit.CropSelectionSize";
            _typeNameTable[14] = "MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter";
            _typeNameTable[15] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[16] = "MyUWPToolkit.FlexGrid.FlexGridItem";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.ListViewItem";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[19] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[20] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[21] = "MyUWPToolkit.FlexGrid.FlexGrid";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.ListView";
            _typeNameTable[23] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.ScrollViewer";
            _typeNameTable[25] = "Boolean";
            _typeNameTable[26] = "MyUWPToolkit.FlexGrid.NewFlexGrid";
            _typeNameTable[27] = "Int32";
            _typeNameTable[28] = "MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader";
            _typeNameTable[29] = "MyUWPToolkit.FlexGrid.NewFlexGridFrozenRows";
            _typeNameTable[30] = "MyUWPToolkit.VirtualizedVariableSizedGridView";
            _typeNameTable[31] = "MyUWPToolkit.ResizeableItems";
            _typeNameTable[32] = "System.Collections.Generic.List`1<MyUWPToolkit.ResizeableItem>";
            _typeNameTable[33] = "MyUWPToolkit.ResizeableItem";
            _typeNameTable[34] = "System.Collections.Generic.List`1<MyUWPToolkit.Resizable>";
            _typeNameTable[35] = "MyUWPToolkit.Resizable";
            _typeNameTable[36] = "Windows.UI.Xaml.Style";
            _typeNameTable[37] = "MyUWPToolkit.GroupListView";
            _typeNameTable[38] = "MyUWPToolkit.GroupListView1";
            _typeNameTable[39] = "MyUWPToolkit.GroupListViewItem";
            _typeNameTable[40] = "MyUWPToolkit.HightLightedRadioButton";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.RadioButton";
            _typeNameTable[42] = "MyUWPToolkit.Converters.VisibilityConverter";
            _typeNameTable[43] = "MyUWPToolkit.ImageTool";
            _typeNameTable[44] = "Windows.UI.Xaml.Media.Imaging.WriteableBitmap";
            _typeNameTable[45] = "MyUWPToolkit.Converters.ColorToStringConverter";
            _typeNameTable[46] = "MyUWPToolkit.ColorPicker";
            _typeNameTable[47] = "Windows.UI.Color";
            _typeNameTable[48] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[49] = "MyUWPToolkit.AdvancedFlyoutPlacementMode";
            _typeNameTable[50] = "MyUWPToolkit.ColorPickerItemsControl";
            _typeNameTable[51] = "MyUWPToolkit.ColorButton";
            _typeNameTable[52] = "MyUWPToolkit.AdvancedFlyoutBase";
            _typeNameTable[53] = "MyUWPToolkit.AdvancedFlyout";
            _typeNameTable[54] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[55] = "MyUWPToolkit.NumericTextBox";
            _typeNameTable[56] = "Windows.UI.Xaml.Controls.TextBox";
            _typeNameTable[57] = "MyUWPToolkit.TransparentBackground";
            _typeNameTable[58] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[59] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[60] = "MyUWPToolkit.NumericUpDown";
            _typeNameTable[61] = "Windows.UI.Xaml.Controls.Primitives.RangeBase";
            _typeNameTable[62] = "MyUWPToolkit.NumericUpDownValueBarVisibility";
            _typeNameTable[63] = "MyUWPToolkit.UpDownTextBox";
            _typeNameTable[64] = "MyUWPToolkit.FrameworkElementExtensions";
            _typeNameTable[65] = "Windows.UI.Core.CoreCursorType";
            _typeNameTable[66] = "System.Collections.Generic.List`1<Windows.UI.Xaml.UIElement>";
            _typeNameTable[67] = "MyUWPToolkit.ClipToBoundsHandler";
            _typeNameTable[68] = "Windows.UI.Core.CoreCursor";
            _typeNameTable[69] = "MyUWPToolkit.CursorDisplayHandler";
            _typeNameTable[70] = "MyUWPToolkit.PullToRefreshControl";
            _typeNameTable[71] = "MyUWPToolkit.Converters.DateTimeConverter";
            _typeNameTable[72] = "MyUWPToolkit.PullToRefreshGrid";
            _typeNameTable[73] = "System.DateTime";
            _typeNameTable[74] = "MyUWPToolkit.PullToRefreshGrid1";
            _typeNameTable[75] = "MyUWPToolkit.PullToRefreshPanel";
            _typeNameTable[76] = "MyUWPToolkit.PullToRefreshBorder";
            _typeNameTable[77] = "Windows.Foundation.Size";
            _typeNameTable[78] = "MyUWPToolkit.ScrollPanel";
            _typeNameTable[79] = "MyUWPToolkit.VariableSizedGridView";
            _typeNameTable[80] = "Windows.UI.Xaml.Controls.GridView";
            _typeNameTable[81] = "MyUWPToolkit.Win2DImageTool";
            _typeNameTable[82] = "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl";
            _typeNameTable[83] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[84] = "Microsoft.Graphics.Canvas.CanvasDevice";
            _typeNameTable[85] = "Single";

            _typeTable = new global::System.Type[86];
            _typeTable[0] = typeof(global::MyUWPToolkit.ColumnChart);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[3] = typeof(global::System.Double);
            _typeTable[4] = typeof(global::System.String);
            _typeTable[5] = typeof(global::System.Collections.IEnumerable);
            _typeTable[6] = typeof(global::MyUWPToolkit.CropImageControl);
            _typeTable[7] = typeof(global::Windows.Storage.StorageFile);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::MyUWPToolkit.CropSelection);
            _typeTable[10] = typeof(global::MyUWPToolkit.AspectRatio);
            _typeTable[11] = typeof(global::System.Enum);
            _typeTable[12] = typeof(global::System.ValueType);
            _typeTable[13] = typeof(global::MyUWPToolkit.CropSelectionSize);
            _typeTable[14] = typeof(global::MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[16] = typeof(global::MyUWPToolkit.FlexGrid.FlexGridItem);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.ListViewItem);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[21] = typeof(global::MyUWPToolkit.FlexGrid.FlexGrid);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.ListView);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.ScrollViewer);
            _typeTable[25] = typeof(global::System.Boolean);
            _typeTable[26] = typeof(global::MyUWPToolkit.FlexGrid.NewFlexGrid);
            _typeTable[27] = typeof(global::System.Int32);
            _typeTable[28] = typeof(global::MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader);
            _typeTable[29] = typeof(global::MyUWPToolkit.FlexGrid.NewFlexGridFrozenRows);
            _typeTable[30] = typeof(global::MyUWPToolkit.VirtualizedVariableSizedGridView);
            _typeTable[31] = typeof(global::MyUWPToolkit.ResizeableItems);
            _typeTable[32] = typeof(global::System.Collections.Generic.List<global::MyUWPToolkit.ResizeableItem>);
            _typeTable[33] = typeof(global::MyUWPToolkit.ResizeableItem);
            _typeTable[34] = typeof(global::System.Collections.Generic.List<global::MyUWPToolkit.Resizable>);
            _typeTable[35] = typeof(global::MyUWPToolkit.Resizable);
            _typeTable[36] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[37] = typeof(global::MyUWPToolkit.GroupListView);
            _typeTable[38] = typeof(global::MyUWPToolkit.GroupListView1);
            _typeTable[39] = typeof(global::MyUWPToolkit.GroupListViewItem);
            _typeTable[40] = typeof(global::MyUWPToolkit.HightLightedRadioButton);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.RadioButton);
            _typeTable[42] = typeof(global::MyUWPToolkit.Converters.VisibilityConverter);
            _typeTable[43] = typeof(global::MyUWPToolkit.ImageTool);
            _typeTable[44] = typeof(global::Windows.UI.Xaml.Media.Imaging.WriteableBitmap);
            _typeTable[45] = typeof(global::MyUWPToolkit.Converters.ColorToStringConverter);
            _typeTable[46] = typeof(global::MyUWPToolkit.ColorPicker);
            _typeTable[47] = typeof(global::Windows.UI.Color);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[49] = typeof(global::MyUWPToolkit.AdvancedFlyoutPlacementMode);
            _typeTable[50] = typeof(global::MyUWPToolkit.ColorPickerItemsControl);
            _typeTable[51] = typeof(global::MyUWPToolkit.ColorButton);
            _typeTable[52] = typeof(global::MyUWPToolkit.AdvancedFlyoutBase);
            _typeTable[53] = typeof(global::MyUWPToolkit.AdvancedFlyout);
            _typeTable[54] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[55] = typeof(global::MyUWPToolkit.NumericTextBox);
            _typeTable[56] = typeof(global::Windows.UI.Xaml.Controls.TextBox);
            _typeTable[57] = typeof(global::MyUWPToolkit.TransparentBackground);
            _typeTable[58] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[59] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[60] = typeof(global::MyUWPToolkit.NumericUpDown);
            _typeTable[61] = typeof(global::Windows.UI.Xaml.Controls.Primitives.RangeBase);
            _typeTable[62] = typeof(global::MyUWPToolkit.NumericUpDownValueBarVisibility);
            _typeTable[63] = typeof(global::MyUWPToolkit.UpDownTextBox);
            _typeTable[64] = typeof(global::MyUWPToolkit.FrameworkElementExtensions);
            _typeTable[65] = typeof(global::Windows.UI.Core.CoreCursorType);
            _typeTable[66] = typeof(global::System.Collections.Generic.List<global::Windows.UI.Xaml.UIElement>);
            _typeTable[67] = typeof(global::MyUWPToolkit.ClipToBoundsHandler);
            _typeTable[68] = typeof(global::Windows.UI.Core.CoreCursor);
            _typeTable[69] = typeof(global::MyUWPToolkit.CursorDisplayHandler);
            _typeTable[70] = typeof(global::MyUWPToolkit.PullToRefreshControl);
            _typeTable[71] = typeof(global::MyUWPToolkit.Converters.DateTimeConverter);
            _typeTable[72] = typeof(global::MyUWPToolkit.PullToRefreshGrid);
            _typeTable[73] = typeof(global::System.DateTime);
            _typeTable[74] = typeof(global::MyUWPToolkit.PullToRefreshGrid1);
            _typeTable[75] = typeof(global::MyUWPToolkit.PullToRefreshPanel);
            _typeTable[76] = typeof(global::MyUWPToolkit.PullToRefreshBorder);
            _typeTable[77] = typeof(global::Windows.Foundation.Size);
            _typeTable[78] = typeof(global::MyUWPToolkit.ScrollPanel);
            _typeTable[79] = typeof(global::MyUWPToolkit.VariableSizedGridView);
            _typeTable[80] = typeof(global::Windows.UI.Xaml.Controls.GridView);
            _typeTable[81] = typeof(global::MyUWPToolkit.Win2DImageTool);
            _typeTable[82] = typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl);
            _typeTable[83] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[84] = typeof(global::Microsoft.Graphics.Canvas.CanvasDevice);
            _typeTable[85] = typeof(global::System.Single);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ColumnChart() { return new global::MyUWPToolkit.ColumnChart(); }
        private object Activate_6_CropImageControl() { return new global::MyUWPToolkit.CropImageControl(); }
        private object Activate_9_CropSelection() { return new global::MyUWPToolkit.CropSelection(); }
        private object Activate_14_CropImageControlLineCoordinateConverter() { return new global::MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter(); }
        private object Activate_16_FlexGridItem() { return new global::MyUWPToolkit.FlexGrid.FlexGridItem(); }
        private object Activate_21_FlexGrid() { return new global::MyUWPToolkit.FlexGrid.FlexGrid(); }
        private object Activate_26_NewFlexGrid() { return new global::MyUWPToolkit.FlexGrid.NewFlexGrid(); }
        private object Activate_28_NewFlexGridColumnHeader() { return new global::MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader(); }
        private object Activate_29_NewFlexGridFrozenRows() { return new global::MyUWPToolkit.FlexGrid.NewFlexGridFrozenRows(); }
        private object Activate_30_VirtualizedVariableSizedGridView() { return new global::MyUWPToolkit.VirtualizedVariableSizedGridView(); }
        private object Activate_31_ResizeableItems() { return new global::MyUWPToolkit.ResizeableItems(); }
        private object Activate_32_List() { return new global::System.Collections.Generic.List<global::MyUWPToolkit.ResizeableItem>(); }
        private object Activate_33_ResizeableItem() { return new global::MyUWPToolkit.ResizeableItem(); }
        private object Activate_34_List() { return new global::System.Collections.Generic.List<global::MyUWPToolkit.Resizable>(); }
        private object Activate_35_Resizable() { return new global::MyUWPToolkit.Resizable(); }
        private object Activate_37_GroupListView() { return new global::MyUWPToolkit.GroupListView(); }
        private object Activate_38_GroupListView1() { return new global::MyUWPToolkit.GroupListView1(); }
        private object Activate_39_GroupListViewItem() { return new global::MyUWPToolkit.GroupListViewItem(); }
        private object Activate_40_HightLightedRadioButton() { return new global::MyUWPToolkit.HightLightedRadioButton(); }
        private object Activate_42_VisibilityConverter() { return new global::MyUWPToolkit.Converters.VisibilityConverter(); }
        private object Activate_43_ImageTool() { return new global::MyUWPToolkit.ImageTool(); }
        private object Activate_45_ColorToStringConverter() { return new global::MyUWPToolkit.Converters.ColorToStringConverter(); }
        private object Activate_46_ColorPicker() { return new global::MyUWPToolkit.ColorPicker(); }
        private object Activate_50_ColorPickerItemsControl() { return new global::MyUWPToolkit.ColorPickerItemsControl(); }
        private object Activate_51_ColorButton() { return new global::MyUWPToolkit.ColorButton(); }
        private object Activate_52_AdvancedFlyoutBase() { return new global::MyUWPToolkit.AdvancedFlyoutBase(); }
        private object Activate_53_AdvancedFlyout() { return new global::MyUWPToolkit.AdvancedFlyout(); }
        private object Activate_55_NumericTextBox() { return new global::MyUWPToolkit.NumericTextBox(); }
        private object Activate_57_TransparentBackground() { return new global::MyUWPToolkit.TransparentBackground(); }
        private object Activate_60_NumericUpDown() { return new global::MyUWPToolkit.NumericUpDown(); }
        private object Activate_63_UpDownTextBox() { return new global::MyUWPToolkit.UpDownTextBox(); }
        private object Activate_66_List() { return new global::System.Collections.Generic.List<global::Windows.UI.Xaml.UIElement>(); }
        private object Activate_67_ClipToBoundsHandler() { return new global::MyUWPToolkit.ClipToBoundsHandler(); }
        private object Activate_69_CursorDisplayHandler() { return new global::MyUWPToolkit.CursorDisplayHandler(); }
        private object Activate_70_PullToRefreshControl() { return new global::MyUWPToolkit.PullToRefreshControl(); }
        private object Activate_71_DateTimeConverter() { return new global::MyUWPToolkit.Converters.DateTimeConverter(); }
        private object Activate_72_PullToRefreshGrid() { return new global::MyUWPToolkit.PullToRefreshGrid(); }
        private object Activate_74_PullToRefreshGrid1() { return new global::MyUWPToolkit.PullToRefreshGrid1(); }
        private object Activate_75_PullToRefreshPanel() { return new global::MyUWPToolkit.PullToRefreshPanel(); }
        private object Activate_76_PullToRefreshBorder() { return new global::MyUWPToolkit.PullToRefreshBorder(); }
        private object Activate_78_ScrollPanel() { return new global::MyUWPToolkit.ScrollPanel(); }
        private object Activate_79_VariableSizedGridView() { return new global::MyUWPToolkit.VariableSizedGridView(); }
        private object Activate_81_Win2DImageTool() { return new global::MyUWPToolkit.Win2DImageTool(); }
        private object Activate_82_CanvasControl() { return new global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl(); }
        private object Activate_84_CanvasDevice() { return new global::Microsoft.Graphics.Canvas.CanvasDevice(); }
        private void VectorAdd_31_ResizeableItems(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyUWPToolkit.ResizeableItem>)instance;
            var newItem = (global::MyUWPToolkit.ResizeableItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyUWPToolkit.ResizeableItem>)instance;
            var newItem = (global::MyUWPToolkit.ResizeableItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyUWPToolkit.Resizable>)instance;
            var newItem = (global::MyUWPToolkit.Resizable)item;
            collection.Add(newItem);
        }
        private void VectorAdd_66_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>)instance;
            var newItem = (global::Windows.UI.Xaml.UIElement)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MyUWPToolkit.ColumnChart
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_ColumnChart;
                userType.AddMemberName("PositiveValueBrush");
                userType.AddMemberName("NegativeValueBrush");
                userType.AddMemberName("IndependentValueFontSize");
                userType.AddMemberName("DependentValueFontSize");
                userType.AddMemberName("GridLineBrush");
                userType.AddMemberName("IndependentValueBrush");
                userType.AddMemberName("DependentValuePath");
                userType.AddMemberName("IndependentValuePath");
                userType.AddMemberName("ItemsSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Double
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  String
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  System.Collections.IEnumerable
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  MyUWPToolkit.CropImageControl
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_6_CropImageControl;
                userType.AddMemberName("SourceImageFile");
                userType.AddMemberName("CropSelection");
                userType.AddMemberName("CropAspectRatio");
                userType.AddMemberName("DefaultCropSelectionSize");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.Storage.StorageFile
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  MyUWPToolkit.CropSelection
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  MyUWPToolkit.AspectRatio
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Custom", global::MyUWPToolkit.AspectRatio.Custom);
                userType.AddEnumValue("Square", global::MyUWPToolkit.AspectRatio.Square);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  System.Enum
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 12:   //  System.ValueType
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  MyUWPToolkit.CropSelectionSize
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Full", global::MyUWPToolkit.CropSelectionSize.Full);
                userType.AddEnumValue("Half", global::MyUWPToolkit.CropSelectionSize.Half);
                userType.AddEnumValue("OneFourth", global::MyUWPToolkit.CropSelectionSize.OneFourth);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_14_CropImageControlLineCoordinateConverter;
                userType.AddMemberName("No1");
                userType.AddMemberName("No2");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  MyUWPToolkit.FlexGrid.FlexGridItem
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListViewItem"));
                userType.Activator = Activate_16_FlexGridItem;
                userType.AddMemberName("FrozenColumnsItemTemplate");
                userType.AddMemberName("FrozenColumnsVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.ListViewItem
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  MyUWPToolkit.FlexGrid.FlexGrid
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_21_FlexGrid;
                userType.AddMemberName("ScrollViewer");
                userType.AddMemberName("FrozenColumnsHeaderItemsSource");
                userType.AddMemberName("ColumnsHeaderItemsSource");
                userType.AddMemberName("FrozenColumnsHeaderItemTemplate");
                userType.AddMemberName("ColumnsHeaderItemTemplate");
                userType.AddMemberName("FrozenColumnsItemTemplate");
                userType.AddMemberName("KeepHorizontalOffsetWhenItemsSourceChanged");
                userType.AddMemberName("FrozenColumnsVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Xaml.Controls.ListView
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Windows.UI.Xaml.Controls.ScrollViewer
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Boolean
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  MyUWPToolkit.FlexGrid.NewFlexGrid
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_26_NewFlexGrid;
                userType.AddMemberName("ColumnHeaderFrozenCount");
                userType.AddMemberName("ScrollViewer");
                userType.AddMemberName("ColumnsHeaderItemsSource");
                userType.AddMemberName("FrozenRowsItemsSource");
                userType.AddMemberName("ColumnsHeaderItemTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Int32
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_28_NewFlexGridColumnHeader;
                userType.AddMemberName("FrozenCount");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  MyUWPToolkit.FlexGrid.NewFlexGridFrozenRows
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_29_NewFlexGridFrozenRows;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  MyUWPToolkit.VirtualizedVariableSizedGridView
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_30_VirtualizedVariableSizedGridView;
                userType.AddMemberName("EmptyContent");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("ResizeableItems");
                userType.AddMemberName("VirtualizedVariableSizedGridViewItemTemplate");
                userType.AddMemberName("VirtualizedVariableSizedGridViewItemContainerStyle");
                userType.AddMemberName("VirtualizedVariableSizedInternalGridViewContainerStyle");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  MyUWPToolkit.ResizeableItems
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.List`1<MyUWPToolkit.ResizeableItem>"));
                userType.CollectionAdd = VectorAdd_31_ResizeableItems;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  System.Collections.Generic.List`1<MyUWPToolkit.ResizeableItem>
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_32_List;
                userType.CollectionAdd = VectorAdd_32_List;
                xamlType = userType;
                break;

            case 33:   //  MyUWPToolkit.ResizeableItem
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_ResizeableItem;
                userType.AddMemberName("Columns");
                userType.AddMemberName("ItemWidth");
                userType.AddMemberName("Items");
                userType.AddMemberName("Min");
                userType.AddMemberName("Max");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  System.Collections.Generic.List`1<MyUWPToolkit.Resizable>
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_34_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  MyUWPToolkit.Resizable
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_35_Resizable;
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Xaml.Style
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  MyUWPToolkit.GroupListView
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_37_GroupListView;
                userType.AddMemberName("GroupHeaderTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  MyUWPToolkit.GroupListView1
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_38_GroupListView1;
                userType.AddMemberName("GroupHeaderTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  MyUWPToolkit.GroupListViewItem
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ListViewItem"));
                userType.Activator = Activate_39_GroupListViewItem;
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  MyUWPToolkit.HightLightedRadioButton
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.RadioButton"));
                userType.Activator = Activate_40_HightLightedRadioButton;
                userType.AddMemberName("HightLightedBackground");
                userType.AddMemberName("HightLightedForeground");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Controls.RadioButton
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  MyUWPToolkit.Converters.VisibilityConverter
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_42_VisibilityConverter;
                userType.AddMemberName("IsReversed");
                userType.AddMemberName("IsInversed");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  MyUWPToolkit.ImageTool
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_43_ImageTool;
                userType.AddMemberName("CropSelection");
                userType.AddMemberName("CropAspectRatio");
                userType.AddMemberName("DefaultCropSelectionSize");
                userType.AddMemberName("SourceImageFile");
                userType.AddMemberName("TempImageFile");
                userType.AddMemberName("EditImageSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  Windows.UI.Xaml.Media.Imaging.WriteableBitmap
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  MyUWPToolkit.Converters.ColorToStringConverter
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_ColorToStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  MyUWPToolkit.ColorPicker
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_46_ColorPicker;
                userType.AddMemberName("FlyoutWidth");
                userType.AddMemberName("FlyoutHeight");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("SelectedColor");
                userType.AddMemberName("PlacementTarget");
                userType.AddMemberName("Placement");
                userType.AddMemberName("ArrowVisibility");
                userType.AddMemberName("Owner");
                userType.AddMemberName("CurrentCustomColor");
                userType.AddMemberName("Title");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Color
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  MyUWPToolkit.AdvancedFlyoutPlacementMode
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("TopLeft", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.TopLeft);
                userType.AddEnumValue("TopCenter", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.TopCenter);
                userType.AddEnumValue("TopRight", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.TopRight);
                userType.AddEnumValue("BottomLeft", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.BottomLeft);
                userType.AddEnumValue("BottomCenter", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.BottomCenter);
                userType.AddEnumValue("BottomRight", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.BottomRight);
                userType.AddEnumValue("LeftTop", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.LeftTop);
                userType.AddEnumValue("LeftCenter", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.LeftCenter);
                userType.AddEnumValue("LeftBottom", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.LeftBottom);
                userType.AddEnumValue("RightTop", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.RightTop);
                userType.AddEnumValue("RightCenter", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.RightCenter);
                userType.AddEnumValue("RightBottom", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.RightBottom);
                userType.AddEnumValue("FullScreen", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.FullScreen);
                userType.AddEnumValue("CenterScreen", global::MyUWPToolkit.AdvancedFlyoutPlacementMode.CenterScreen);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  MyUWPToolkit.ColorPickerItemsControl
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_50_ColorPickerItemsControl;
                userType.AddMemberName("ColorPicker");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  MyUWPToolkit.ColorButton
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_51_ColorButton;
                userType.AddMemberName("Color");
                userType.AddMemberName("IsSelected");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  MyUWPToolkit.AdvancedFlyoutBase
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_52_AdvancedFlyoutBase;
                userType.AddMemberName("IsLightDismissEnabled");
                userType.AddMemberName("VerticalOffset");
                userType.AddMemberName("HorizontalOffset");
                userType.AddMemberName("Placement");
                userType.AddMemberName("AttachedFlyout");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  MyUWPToolkit.AdvancedFlyout
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyUWPToolkit.AdvancedFlyoutBase"));
                userType.Activator = Activate_53_AdvancedFlyout;
                userType.SetContentPropertyName("MyUWPToolkit.AdvancedFlyout.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("FlyoutPresenterStyle");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  MyUWPToolkit.NumericTextBox
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_55_NumericTextBox;
                userType.AddMemberName("ValueFormat");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Value");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  Windows.UI.Xaml.Controls.TextBox
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 57:   //  MyUWPToolkit.TransparentBackground
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_57_TransparentBackground;
                userType.AddMemberName("SquareWidth");
                userType.AddMemberName("SquareBrush");
                userType.AddMemberName("AlternatingSquareBrush");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 60:   //  MyUWPToolkit.NumericUpDown
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.RangeBase"));
                userType.Activator = Activate_60_NumericUpDown;
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ValueFormat");
                userType.AddMemberName("ValueBarVisibility");
                userType.AddMemberName("IsReadOnly");
                userType.AddMemberName("DragSpeed");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  Windows.UI.Xaml.Controls.Primitives.RangeBase
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  MyUWPToolkit.NumericUpDownValueBarVisibility
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::MyUWPToolkit.NumericUpDownValueBarVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::MyUWPToolkit.NumericUpDownValueBarVisibility.Collapsed);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 63:   //  MyUWPToolkit.UpDownTextBox
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_63_UpDownTextBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 64:   //  MyUWPToolkit.FrameworkElementExtensions
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("SystemCursor");
                userType.AddMemberName("AllChildren");
                userType.AddMemberName("ClipToBounds");
                userType.AddMemberName("ClipToBoundsHandler");
                userType.AddMemberName("Cursor");
                userType.AddMemberName("CursorDisplayHandler");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Windows.UI.Core.CoreCursorType
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arrow", global::Windows.UI.Core.CoreCursorType.Arrow);
                userType.AddEnumValue("Cross", global::Windows.UI.Core.CoreCursorType.Cross);
                userType.AddEnumValue("Custom", global::Windows.UI.Core.CoreCursorType.Custom);
                userType.AddEnumValue("Hand", global::Windows.UI.Core.CoreCursorType.Hand);
                userType.AddEnumValue("Help", global::Windows.UI.Core.CoreCursorType.Help);
                userType.AddEnumValue("IBeam", global::Windows.UI.Core.CoreCursorType.IBeam);
                userType.AddEnumValue("SizeAll", global::Windows.UI.Core.CoreCursorType.SizeAll);
                userType.AddEnumValue("SizeNortheastSouthwest", global::Windows.UI.Core.CoreCursorType.SizeNortheastSouthwest);
                userType.AddEnumValue("SizeNorthSouth", global::Windows.UI.Core.CoreCursorType.SizeNorthSouth);
                userType.AddEnumValue("SizeNorthwestSoutheast", global::Windows.UI.Core.CoreCursorType.SizeNorthwestSoutheast);
                userType.AddEnumValue("SizeWestEast", global::Windows.UI.Core.CoreCursorType.SizeWestEast);
                userType.AddEnumValue("UniversalNo", global::Windows.UI.Core.CoreCursorType.UniversalNo);
                userType.AddEnumValue("UpArrow", global::Windows.UI.Core.CoreCursorType.UpArrow);
                userType.AddEnumValue("Wait", global::Windows.UI.Core.CoreCursorType.Wait);
                xamlType = userType;
                break;

            case 66:   //  System.Collections.Generic.List`1<Windows.UI.Xaml.UIElement>
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_66_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 67:   //  MyUWPToolkit.ClipToBoundsHandler
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 68:   //  Windows.UI.Core.CoreCursor
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 69:   //  MyUWPToolkit.CursorDisplayHandler
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 70:   //  MyUWPToolkit.PullToRefreshControl
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_70_PullToRefreshControl;
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("RefreshThreshold");
                userType.AddMemberName("IsReachThreshold");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 71:   //  MyUWPToolkit.Converters.DateTimeConverter
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_71_DateTimeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 72:   //  MyUWPToolkit.PullToRefreshGrid
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_72_PullToRefreshGrid;
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("RefreshThreshold");
                userType.AddMemberName("IsReachThreshold");
                userType.AddMemberName("LastRefreshTime");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 73:   //  System.DateTime
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 74:   //  MyUWPToolkit.PullToRefreshGrid1
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_74_PullToRefreshGrid1;
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("RefreshThreshold");
                userType.AddMemberName("IsReachThreshold");
                userType.AddMemberName("LastRefreshTime");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  MyUWPToolkit.PullToRefreshPanel
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_75_PullToRefreshPanel;
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("RefreshThreshold");
                userType.AddMemberName("IsReachThreshold");
                userType.AddMemberName("LastRefreshTime");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 76:   //  MyUWPToolkit.PullToRefreshBorder
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_76_PullToRefreshBorder;
                userType.AddMemberName("myAvailableSize");
                userType.AddMemberName("myFinalSize");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 77:   //  Windows.Foundation.Size
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 78:   //  MyUWPToolkit.ScrollPanel
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_78_ScrollPanel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 79:   //  MyUWPToolkit.VariableSizedGridView
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.GridView"));
                userType.Activator = Activate_79_VariableSizedGridView;
                userType.AddMemberName("ResizeableItem");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 80:   //  Windows.UI.Xaml.Controls.GridView
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  MyUWPToolkit.Win2DImageTool
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_81_Win2DImageTool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 82:   //  Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_82_CanvasControl;
                userType.AddMemberName("Device");
                userType.AddMemberName("Dpi");
                userType.AddMemberName("UseSharedDevice");
                userType.AddMemberName("ForceSoftwareRenderer");
                userType.AddMemberName("DpiScale");
                userType.AddMemberName("CustomDevice");
                userType.AddMemberName("ClearColor");
                userType.AddMemberName("ReadyToDraw");
                userType.AddMemberName("Size");
                xamlType = userType;
                break;

            case 83:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 84:   //  Microsoft.Graphics.Canvas.CanvasDevice
                userType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 85:   //  Single
                xamlType = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }


        private object get_0_ColumnChart_PositiveValueBrush(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.PositiveValueBrush;
        }
        private void set_0_ColumnChart_PositiveValueBrush(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.PositiveValueBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_1_ColumnChart_NegativeValueBrush(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.NegativeValueBrush;
        }
        private void set_1_ColumnChart_NegativeValueBrush(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.NegativeValueBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_2_ColumnChart_IndependentValueFontSize(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.IndependentValueFontSize;
        }
        private void set_2_ColumnChart_IndependentValueFontSize(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.IndependentValueFontSize = (global::System.Double)Value;
        }
        private object get_3_ColumnChart_DependentValueFontSize(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.DependentValueFontSize;
        }
        private void set_3_ColumnChart_DependentValueFontSize(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.DependentValueFontSize = (global::System.Double)Value;
        }
        private object get_4_ColumnChart_GridLineBrush(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.GridLineBrush;
        }
        private void set_4_ColumnChart_GridLineBrush(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.GridLineBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_5_ColumnChart_IndependentValueBrush(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.IndependentValueBrush;
        }
        private void set_5_ColumnChart_IndependentValueBrush(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.IndependentValueBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_6_ColumnChart_DependentValuePath(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.DependentValuePath;
        }
        private void set_6_ColumnChart_DependentValuePath(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.DependentValuePath = (global::System.String)Value;
        }
        private object get_7_ColumnChart_IndependentValuePath(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.IndependentValuePath;
        }
        private void set_7_ColumnChart_IndependentValuePath(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.IndependentValuePath = (global::System.String)Value;
        }
        private object get_8_ColumnChart_ItemsSource(object instance)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            return that.ItemsSource;
        }
        private void set_8_ColumnChart_ItemsSource(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColumnChart)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_9_CropImageControl_SourceImageFile(object instance)
        {
            var that = (global::MyUWPToolkit.CropImageControl)instance;
            return that.SourceImageFile;
        }
        private void set_9_CropImageControl_SourceImageFile(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.CropImageControl)instance;
            that.SourceImageFile = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_10_CropImageControl_CropSelection(object instance)
        {
            var that = (global::MyUWPToolkit.CropImageControl)instance;
            return that.CropSelection;
        }
        private object get_11_CropImageControl_CropAspectRatio(object instance)
        {
            var that = (global::MyUWPToolkit.CropImageControl)instance;
            return that.CropAspectRatio;
        }
        private void set_11_CropImageControl_CropAspectRatio(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.CropImageControl)instance;
            that.CropAspectRatio = (global::MyUWPToolkit.AspectRatio)Value;
        }
        private object get_12_CropImageControl_DefaultCropSelectionSize(object instance)
        {
            var that = (global::MyUWPToolkit.CropImageControl)instance;
            return that.DefaultCropSelectionSize;
        }
        private void set_12_CropImageControl_DefaultCropSelectionSize(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.CropImageControl)instance;
            that.DefaultCropSelectionSize = (global::MyUWPToolkit.CropSelectionSize)Value;
        }
        private object get_13_CropImageControlLineCoordinateConverter_No1(object instance)
        {
            var that = (global::MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter)instance;
            return that.No1;
        }
        private void set_13_CropImageControlLineCoordinateConverter_No1(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter)instance;
            that.No1 = (global::System.Double)Value;
        }
        private object get_14_CropImageControlLineCoordinateConverter_No2(object instance)
        {
            var that = (global::MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter)instance;
            return that.No2;
        }
        private void set_14_CropImageControlLineCoordinateConverter_No2(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter)instance;
            that.No2 = (global::System.Double)Value;
        }
        private object get_15_FlexGridItem_FrozenColumnsItemTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGridItem)instance;
            return that.FrozenColumnsItemTemplate;
        }
        private void set_15_FlexGridItem_FrozenColumnsItemTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGridItem)instance;
            that.FrozenColumnsItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_16_FlexGridItem_FrozenColumnsVisibility(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGridItem)instance;
            return that.FrozenColumnsVisibility;
        }
        private void set_16_FlexGridItem_FrozenColumnsVisibility(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGridItem)instance;
            that.FrozenColumnsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_17_FlexGrid_ScrollViewer(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.ScrollViewer;
        }
        private object get_18_FlexGrid_FrozenColumnsHeaderItemsSource(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.FrozenColumnsHeaderItemsSource;
        }
        private void set_18_FlexGrid_FrozenColumnsHeaderItemsSource(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            that.FrozenColumnsHeaderItemsSource = (global::System.Object)Value;
        }
        private object get_19_FlexGrid_ColumnsHeaderItemsSource(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.ColumnsHeaderItemsSource;
        }
        private void set_19_FlexGrid_ColumnsHeaderItemsSource(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            that.ColumnsHeaderItemsSource = (global::System.Object)Value;
        }
        private object get_20_FlexGrid_FrozenColumnsHeaderItemTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.FrozenColumnsHeaderItemTemplate;
        }
        private void set_20_FlexGrid_FrozenColumnsHeaderItemTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            that.FrozenColumnsHeaderItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_21_FlexGrid_ColumnsHeaderItemTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.ColumnsHeaderItemTemplate;
        }
        private void set_21_FlexGrid_ColumnsHeaderItemTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            that.ColumnsHeaderItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_22_FlexGrid_FrozenColumnsItemTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.FrozenColumnsItemTemplate;
        }
        private void set_22_FlexGrid_FrozenColumnsItemTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            that.FrozenColumnsItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_23_FlexGrid_KeepHorizontalOffsetWhenItemsSourceChanged(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.KeepHorizontalOffsetWhenItemsSourceChanged;
        }
        private void set_23_FlexGrid_KeepHorizontalOffsetWhenItemsSourceChanged(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            that.KeepHorizontalOffsetWhenItemsSourceChanged = (global::System.Boolean)Value;
        }
        private object get_24_FlexGrid_FrozenColumnsVisibility(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            return that.FrozenColumnsVisibility;
        }
        private void set_24_FlexGrid_FrozenColumnsVisibility(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.FlexGrid)instance;
            that.FrozenColumnsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_25_NewFlexGrid_ColumnHeaderFrozenCount(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            return that.ColumnHeaderFrozenCount;
        }
        private void set_25_NewFlexGrid_ColumnHeaderFrozenCount(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            that.ColumnHeaderFrozenCount = (global::System.Int32)Value;
        }
        private object get_26_NewFlexGrid_ScrollViewer(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            return that.ScrollViewer;
        }
        private object get_27_NewFlexGrid_ColumnsHeaderItemsSource(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            return that.ColumnsHeaderItemsSource;
        }
        private void set_27_NewFlexGrid_ColumnsHeaderItemsSource(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            that.ColumnsHeaderItemsSource = (global::System.Object)Value;
        }
        private object get_28_NewFlexGrid_FrozenRowsItemsSource(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            return that.FrozenRowsItemsSource;
        }
        private void set_28_NewFlexGrid_FrozenRowsItemsSource(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            that.FrozenRowsItemsSource = (global::System.Object)Value;
        }
        private object get_29_NewFlexGrid_ColumnsHeaderItemTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            return that.ColumnsHeaderItemTemplate;
        }
        private void set_29_NewFlexGrid_ColumnsHeaderItemTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGrid)instance;
            that.ColumnsHeaderItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_30_NewFlexGridColumnHeader_FrozenCount(object instance)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader)instance;
            return that.FrozenCount;
        }
        private void set_30_NewFlexGridColumnHeader_FrozenCount(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader)instance;
            that.FrozenCount = (global::System.Int32)Value;
        }
        private object get_31_VirtualizedVariableSizedGridView_EmptyContent(object instance)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            return that.EmptyContent;
        }
        private void set_31_VirtualizedVariableSizedGridView_EmptyContent(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            that.EmptyContent = (global::System.Object)Value;
        }
        private object get_32_VirtualizedVariableSizedGridView_EmptyContentTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            return that.EmptyContentTemplate;
        }
        private void set_32_VirtualizedVariableSizedGridView_EmptyContentTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            that.EmptyContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_33_VirtualizedVariableSizedGridView_ResizeableItems(object instance)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            return that.ResizeableItems;
        }
        private object get_34_ResizeableItem_Columns(object instance)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            return that.Columns;
        }
        private void set_34_ResizeableItem_Columns(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            that.Columns = (global::System.Int32)Value;
        }
        private object get_35_ResizeableItem_ItemWidth(object instance)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            return that.ItemWidth;
        }
        private void set_35_ResizeableItem_ItemWidth(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            that.ItemWidth = (global::System.Int32)Value;
        }
        private object get_36_ResizeableItem_Items(object instance)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            return that.Items;
        }
        private void set_36_ResizeableItem_Items(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            that.Items = (global::System.Collections.Generic.List<global::MyUWPToolkit.Resizable>)Value;
        }
        private object get_37_Resizable_Width(object instance)
        {
            var that = (global::MyUWPToolkit.Resizable)instance;
            return that.Width;
        }
        private void set_37_Resizable_Width(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.Resizable)instance;
            that.Width = (global::System.Int32)Value;
        }
        private object get_38_Resizable_Height(object instance)
        {
            var that = (global::MyUWPToolkit.Resizable)instance;
            return that.Height;
        }
        private void set_38_Resizable_Height(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.Resizable)instance;
            that.Height = (global::System.Int32)Value;
        }
        private object get_39_ResizeableItem_Min(object instance)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            return that.Min;
        }
        private void set_39_ResizeableItem_Min(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            that.Min = (global::System.Double)Value;
        }
        private object get_40_ResizeableItem_Max(object instance)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            return that.Max;
        }
        private void set_40_ResizeableItem_Max(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ResizeableItem)instance;
            that.Max = (global::System.Double)Value;
        }
        private object get_41_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            return that.VirtualizedVariableSizedGridViewItemTemplate;
        }
        private void set_41_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            that.VirtualizedVariableSizedGridViewItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_42_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemContainerStyle(object instance)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            return that.VirtualizedVariableSizedGridViewItemContainerStyle;
        }
        private void set_42_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemContainerStyle(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            that.VirtualizedVariableSizedGridViewItemContainerStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_43_VirtualizedVariableSizedGridView_VirtualizedVariableSizedInternalGridViewContainerStyle(object instance)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            return that.VirtualizedVariableSizedInternalGridViewContainerStyle;
        }
        private void set_43_VirtualizedVariableSizedGridView_VirtualizedVariableSizedInternalGridViewContainerStyle(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.VirtualizedVariableSizedGridView)instance;
            that.VirtualizedVariableSizedInternalGridViewContainerStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_44_GroupListView_GroupHeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.GroupListView)instance;
            return that.GroupHeaderTemplate;
        }
        private void set_44_GroupListView_GroupHeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.GroupListView)instance;
            that.GroupHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_45_GroupListView1_GroupHeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.GroupListView1)instance;
            return that.GroupHeaderTemplate;
        }
        private void set_45_GroupListView1_GroupHeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.GroupListView1)instance;
            that.GroupHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_46_GroupListViewItem_Header(object instance)
        {
            var that = (global::MyUWPToolkit.GroupListViewItem)instance;
            return that.Header;
        }
        private void set_46_GroupListViewItem_Header(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.GroupListViewItem)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_47_GroupListViewItem_HeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.GroupListViewItem)instance;
            return that.HeaderTemplate;
        }
        private void set_47_GroupListViewItem_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.GroupListViewItem)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_48_HightLightedRadioButton_HightLightedBackground(object instance)
        {
            var that = (global::MyUWPToolkit.HightLightedRadioButton)instance;
            return that.HightLightedBackground;
        }
        private void set_48_HightLightedRadioButton_HightLightedBackground(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.HightLightedRadioButton)instance;
            that.HightLightedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_49_HightLightedRadioButton_HightLightedForeground(object instance)
        {
            var that = (global::MyUWPToolkit.HightLightedRadioButton)instance;
            return that.HightLightedForeground;
        }
        private void set_49_HightLightedRadioButton_HightLightedForeground(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.HightLightedRadioButton)instance;
            that.HightLightedForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_50_VisibilityConverter_IsReversed(object instance)
        {
            var that = (global::MyUWPToolkit.Converters.VisibilityConverter)instance;
            return that.IsReversed;
        }
        private void set_50_VisibilityConverter_IsReversed(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.Converters.VisibilityConverter)instance;
            that.IsReversed = (global::System.Boolean)Value;
        }
        private object get_51_VisibilityConverter_IsInversed(object instance)
        {
            var that = (global::MyUWPToolkit.Converters.VisibilityConverter)instance;
            return that.IsInversed;
        }
        private void set_51_VisibilityConverter_IsInversed(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.Converters.VisibilityConverter)instance;
            that.IsInversed = (global::System.Boolean)Value;
        }
        private object get_52_ImageTool_CropSelection(object instance)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            return that.CropSelection;
        }
        private object get_53_ImageTool_CropAspectRatio(object instance)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            return that.CropAspectRatio;
        }
        private void set_53_ImageTool_CropAspectRatio(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            that.CropAspectRatio = (global::MyUWPToolkit.AspectRatio)Value;
        }
        private object get_54_ImageTool_DefaultCropSelectionSize(object instance)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            return that.DefaultCropSelectionSize;
        }
        private void set_54_ImageTool_DefaultCropSelectionSize(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            that.DefaultCropSelectionSize = (global::MyUWPToolkit.CropSelectionSize)Value;
        }
        private object get_55_ImageTool_SourceImageFile(object instance)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            return that.SourceImageFile;
        }
        private void set_55_ImageTool_SourceImageFile(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            that.SourceImageFile = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_56_ImageTool_TempImageFile(object instance)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            return that.TempImageFile;
        }
        private object get_57_ImageTool_EditImageSource(object instance)
        {
            var that = (global::MyUWPToolkit.ImageTool)instance;
            return that.EditImageSource;
        }
        private object get_58_ColorPicker_FlyoutWidth(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.FlyoutWidth;
        }
        private void set_58_ColorPicker_FlyoutWidth(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.FlyoutWidth = (global::System.Double)Value;
        }
        private object get_59_ColorPicker_FlyoutHeight(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.FlyoutHeight;
        }
        private void set_59_ColorPicker_FlyoutHeight(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.FlyoutHeight = (global::System.Double)Value;
        }
        private object get_60_ColorPicker_IsOpen(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.IsOpen;
        }
        private object get_61_ColorPicker_SelectedColor(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.SelectedColor;
        }
        private void set_61_ColorPicker_SelectedColor(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.SelectedColor = (global::Windows.UI.Color)Value;
        }
        private object get_62_ColorPicker_PlacementTarget(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.PlacementTarget;
        }
        private void set_62_ColorPicker_PlacementTarget(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.PlacementTarget = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_63_ColorPicker_Placement(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.Placement;
        }
        private void set_63_ColorPicker_Placement(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.Placement = (global::MyUWPToolkit.AdvancedFlyoutPlacementMode)Value;
        }
        private object get_64_ColorPicker_ArrowVisibility(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.ArrowVisibility;
        }
        private void set_64_ColorPicker_ArrowVisibility(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.ArrowVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_65_ColorPicker_Owner(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.Owner;
        }
        private void set_65_ColorPicker_Owner(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.Owner = (global::System.Object)Value;
        }
        private object get_66_ColorPicker_CurrentCustomColor(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.CurrentCustomColor;
        }
        private object get_67_ColorPicker_Title(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            return that.Title;
        }
        private void set_67_ColorPicker_Title(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorPicker)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_68_ColorPickerItemsControl_ColorPicker(object instance)
        {
            var that = (global::MyUWPToolkit.ColorPickerItemsControl)instance;
            return that.ColorPicker;
        }
        private object get_69_ColorButton_Color(object instance)
        {
            var that = (global::MyUWPToolkit.ColorButton)instance;
            return that.Color;
        }
        private void set_69_ColorButton_Color(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorButton)instance;
            that.Color = (global::Windows.UI.Color)Value;
        }
        private object get_70_ColorButton_IsSelected(object instance)
        {
            var that = (global::MyUWPToolkit.ColorButton)instance;
            return that.IsSelected;
        }
        private void set_70_ColorButton_IsSelected(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.ColorButton)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_71_AdvancedFlyoutBase_IsLightDismissEnabled(object instance)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_71_AdvancedFlyoutBase_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_72_AdvancedFlyoutBase_VerticalOffset(object instance)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            return that.VerticalOffset;
        }
        private void set_72_AdvancedFlyoutBase_VerticalOffset(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            that.VerticalOffset = (global::System.Double)Value;
        }
        private object get_73_AdvancedFlyoutBase_HorizontalOffset(object instance)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            return that.HorizontalOffset;
        }
        private void set_73_AdvancedFlyoutBase_HorizontalOffset(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            that.HorizontalOffset = (global::System.Double)Value;
        }
        private object get_74_AdvancedFlyoutBase_Placement(object instance)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            return that.Placement;
        }
        private void set_74_AdvancedFlyoutBase_Placement(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyoutBase)instance;
            that.Placement = (global::MyUWPToolkit.AdvancedFlyoutPlacementMode)Value;
        }
        private object get_75_AdvancedFlyoutBase_AttachedFlyout(object instance)
        {
            return global::MyUWPToolkit.AdvancedFlyoutBase.GetAttachedFlyout((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_75_AdvancedFlyoutBase_AttachedFlyout(object instance, object Value)
        {
            global::MyUWPToolkit.AdvancedFlyoutBase.SetAttachedFlyout((global::Windows.UI.Xaml.FrameworkElement)instance, (global::MyUWPToolkit.AdvancedFlyoutBase)Value);
        }
        private object get_76_AdvancedFlyout_Content(object instance)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyout)instance;
            return that.Content;
        }
        private void set_76_AdvancedFlyout_Content(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyout)instance;
            that.Content = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_77_AdvancedFlyout_FlyoutPresenterStyle(object instance)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyout)instance;
            return that.FlyoutPresenterStyle;
        }
        private void set_77_AdvancedFlyout_FlyoutPresenterStyle(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.AdvancedFlyout)instance;
            that.FlyoutPresenterStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_78_NumericTextBox_ValueFormat(object instance)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            return that.ValueFormat;
        }
        private void set_78_NumericTextBox_ValueFormat(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            that.ValueFormat = (global::System.String)Value;
        }
        private object get_79_NumericTextBox_Minimum(object instance)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            return that.Minimum;
        }
        private void set_79_NumericTextBox_Minimum(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_80_NumericTextBox_Maximum(object instance)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            return that.Maximum;
        }
        private void set_80_NumericTextBox_Maximum(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_81_NumericTextBox_Value(object instance)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            return that.Value;
        }
        private void set_81_NumericTextBox_Value(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericTextBox)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_82_TransparentBackground_SquareWidth(object instance)
        {
            var that = (global::MyUWPToolkit.TransparentBackground)instance;
            return that.SquareWidth;
        }
        private void set_82_TransparentBackground_SquareWidth(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.TransparentBackground)instance;
            that.SquareWidth = (global::System.Double)Value;
        }
        private object get_83_TransparentBackground_SquareBrush(object instance)
        {
            var that = (global::MyUWPToolkit.TransparentBackground)instance;
            return that.SquareBrush;
        }
        private void set_83_TransparentBackground_SquareBrush(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.TransparentBackground)instance;
            that.SquareBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_84_TransparentBackground_AlternatingSquareBrush(object instance)
        {
            var that = (global::MyUWPToolkit.TransparentBackground)instance;
            return that.AlternatingSquareBrush;
        }
        private void set_84_TransparentBackground_AlternatingSquareBrush(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.TransparentBackground)instance;
            that.AlternatingSquareBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_85_NumericUpDown_Header(object instance)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            return that.Header;
        }
        private void set_85_NumericUpDown_Header(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_86_NumericUpDown_HeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            return that.HeaderTemplate;
        }
        private void set_86_NumericUpDown_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_87_NumericUpDown_ValueFormat(object instance)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            return that.ValueFormat;
        }
        private void set_87_NumericUpDown_ValueFormat(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            that.ValueFormat = (global::System.String)Value;
        }
        private object get_88_NumericUpDown_ValueBarVisibility(object instance)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            return that.ValueBarVisibility;
        }
        private void set_88_NumericUpDown_ValueBarVisibility(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            that.ValueBarVisibility = (global::MyUWPToolkit.NumericUpDownValueBarVisibility)Value;
        }
        private object get_89_NumericUpDown_IsReadOnly(object instance)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            return that.IsReadOnly;
        }
        private void set_89_NumericUpDown_IsReadOnly(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_90_NumericUpDown_DragSpeed(object instance)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            return that.DragSpeed;
        }
        private void set_90_NumericUpDown_DragSpeed(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.NumericUpDown)instance;
            that.DragSpeed = (global::System.Double)Value;
        }
        private object get_91_FrameworkElementExtensions_SystemCursor(object instance)
        {
            return global::MyUWPToolkit.FrameworkElementExtensions.GetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_91_FrameworkElementExtensions_SystemCursor(object instance, object Value)
        {
            global::MyUWPToolkit.FrameworkElementExtensions.SetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance, (global::Windows.UI.Core.CoreCursorType)Value);
        }
        private object get_92_FrameworkElementExtensions_AllChildren(object instance)
        {
            return global::MyUWPToolkit.FrameworkElementExtensions.GetAllChildren((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private object get_93_FrameworkElementExtensions_ClipToBounds(object instance)
        {
            return global::MyUWPToolkit.FrameworkElementExtensions.GetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_93_FrameworkElementExtensions_ClipToBounds(object instance, object Value)
        {
            global::MyUWPToolkit.FrameworkElementExtensions.SetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Boolean)Value);
        }
        private object get_94_FrameworkElementExtensions_ClipToBoundsHandler(object instance)
        {
            return global::MyUWPToolkit.FrameworkElementExtensions.GetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_94_FrameworkElementExtensions_ClipToBoundsHandler(object instance, object Value)
        {
            global::MyUWPToolkit.FrameworkElementExtensions.SetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance, (global::MyUWPToolkit.ClipToBoundsHandler)Value);
        }
        private object get_95_FrameworkElementExtensions_Cursor(object instance)
        {
            return global::MyUWPToolkit.FrameworkElementExtensions.GetCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_95_FrameworkElementExtensions_Cursor(object instance, object Value)
        {
            global::MyUWPToolkit.FrameworkElementExtensions.SetCursor((global::Windows.UI.Xaml.DependencyObject)instance, (global::Windows.UI.Core.CoreCursor)Value);
        }
        private object get_96_FrameworkElementExtensions_CursorDisplayHandler(object instance)
        {
            return global::MyUWPToolkit.FrameworkElementExtensions.GetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_96_FrameworkElementExtensions_CursorDisplayHandler(object instance, object Value)
        {
            global::MyUWPToolkit.FrameworkElementExtensions.SetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance, (global::MyUWPToolkit.CursorDisplayHandler)Value);
        }
        private object get_97_PullToRefreshControl_HeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshControl)instance;
            return that.HeaderTemplate;
        }
        private void set_97_PullToRefreshControl_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshControl)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_98_PullToRefreshControl_RefreshThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshControl)instance;
            return that.RefreshThreshold;
        }
        private void set_98_PullToRefreshControl_RefreshThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshControl)instance;
            that.RefreshThreshold = (global::System.Double)Value;
        }
        private object get_99_PullToRefreshControl_IsReachThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshControl)instance;
            return that.IsReachThreshold;
        }
        private void set_99_PullToRefreshControl_IsReachThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshControl)instance;
            that.IsReachThreshold = (global::System.Boolean)Value;
        }
        private object get_100_PullToRefreshGrid_HeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            return that.HeaderTemplate;
        }
        private void set_100_PullToRefreshGrid_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_101_PullToRefreshGrid_RefreshThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            return that.RefreshThreshold;
        }
        private void set_101_PullToRefreshGrid_RefreshThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            that.RefreshThreshold = (global::System.Double)Value;
        }
        private object get_102_PullToRefreshGrid_IsReachThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            return that.IsReachThreshold;
        }
        private void set_102_PullToRefreshGrid_IsReachThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            that.IsReachThreshold = (global::System.Boolean)Value;
        }
        private object get_103_PullToRefreshGrid_LastRefreshTime(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            return that.LastRefreshTime;
        }
        private void set_103_PullToRefreshGrid_LastRefreshTime(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid)instance;
            that.LastRefreshTime = (global::System.DateTime)Value;
        }
        private object get_104_PullToRefreshGrid1_HeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            return that.HeaderTemplate;
        }
        private void set_104_PullToRefreshGrid1_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_105_PullToRefreshGrid1_RefreshThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            return that.RefreshThreshold;
        }
        private void set_105_PullToRefreshGrid1_RefreshThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            that.RefreshThreshold = (global::System.Double)Value;
        }
        private object get_106_PullToRefreshGrid1_IsReachThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            return that.IsReachThreshold;
        }
        private void set_106_PullToRefreshGrid1_IsReachThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            that.IsReachThreshold = (global::System.Boolean)Value;
        }
        private object get_107_PullToRefreshGrid1_LastRefreshTime(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            return that.LastRefreshTime;
        }
        private void set_107_PullToRefreshGrid1_LastRefreshTime(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshGrid1)instance;
            that.LastRefreshTime = (global::System.DateTime)Value;
        }
        private object get_108_PullToRefreshPanel_HeaderTemplate(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            return that.HeaderTemplate;
        }
        private void set_108_PullToRefreshPanel_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_109_PullToRefreshPanel_RefreshThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            return that.RefreshThreshold;
        }
        private void set_109_PullToRefreshPanel_RefreshThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            that.RefreshThreshold = (global::System.Double)Value;
        }
        private object get_110_PullToRefreshPanel_IsReachThreshold(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            return that.IsReachThreshold;
        }
        private void set_110_PullToRefreshPanel_IsReachThreshold(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            that.IsReachThreshold = (global::System.Boolean)Value;
        }
        private object get_111_PullToRefreshPanel_LastRefreshTime(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            return that.LastRefreshTime;
        }
        private void set_111_PullToRefreshPanel_LastRefreshTime(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshPanel)instance;
            that.LastRefreshTime = (global::System.DateTime)Value;
        }
        private object get_112_PullToRefreshBorder_myAvailableSize(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshBorder)instance;
            return that.myAvailableSize;
        }
        private void set_112_PullToRefreshBorder_myAvailableSize(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshBorder)instance;
            that.myAvailableSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_113_PullToRefreshBorder_myFinalSize(object instance)
        {
            var that = (global::MyUWPToolkit.PullToRefreshBorder)instance;
            return that.myFinalSize;
        }
        private void set_113_PullToRefreshBorder_myFinalSize(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.PullToRefreshBorder)instance;
            that.myFinalSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_114_VariableSizedGridView_ResizeableItem(object instance)
        {
            var that = (global::MyUWPToolkit.VariableSizedGridView)instance;
            return that.ResizeableItem;
        }
        private void set_114_VariableSizedGridView_ResizeableItem(object instance, object Value)
        {
            var that = (global::MyUWPToolkit.VariableSizedGridView)instance;
            that.ResizeableItem = (global::MyUWPToolkit.ResizeableItem)Value;
        }
        private object get_115_CanvasControl_Device(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.Device;
        }
        private object get_116_CanvasControl_Dpi(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.Dpi;
        }
        private object get_117_CanvasControl_UseSharedDevice(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.UseSharedDevice;
        }
        private void set_117_CanvasControl_UseSharedDevice(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.UseSharedDevice = (global::System.Boolean)Value;
        }
        private object get_118_CanvasControl_ForceSoftwareRenderer(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.ForceSoftwareRenderer;
        }
        private void set_118_CanvasControl_ForceSoftwareRenderer(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.ForceSoftwareRenderer = (global::System.Boolean)Value;
        }
        private object get_119_CanvasControl_DpiScale(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.DpiScale;
        }
        private void set_119_CanvasControl_DpiScale(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.DpiScale = (global::System.Single)Value;
        }
        private object get_120_CanvasControl_CustomDevice(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.CustomDevice;
        }
        private void set_120_CanvasControl_CustomDevice(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.CustomDevice = (global::Microsoft.Graphics.Canvas.CanvasDevice)Value;
        }
        private object get_121_CanvasControl_ClearColor(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.ClearColor;
        }
        private void set_121_CanvasControl_ClearColor(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            that.ClearColor = (global::Windows.UI.Color)Value;
        }
        private object get_122_CanvasControl_ReadyToDraw(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.ReadyToDraw;
        }
        private object get_123_CanvasControl_Size(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl)instance;
            return that.Size;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember xamlMember = null;
            global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MyUWPToolkit.ColumnChart.PositiveValueBrush":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "PositiveValueBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_ColumnChart_PositiveValueBrush;
                xamlMember.Setter = set_0_ColumnChart_PositiveValueBrush;
                break;
            case "MyUWPToolkit.ColumnChart.NegativeValueBrush":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "NegativeValueBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_ColumnChart_NegativeValueBrush;
                xamlMember.Setter = set_1_ColumnChart_NegativeValueBrush;
                break;
            case "MyUWPToolkit.ColumnChart.IndependentValueFontSize":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IndependentValueFontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_ColumnChart_IndependentValueFontSize;
                xamlMember.Setter = set_2_ColumnChart_IndependentValueFontSize;
                break;
            case "MyUWPToolkit.ColumnChart.DependentValueFontSize":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "DependentValueFontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_ColumnChart_DependentValueFontSize;
                xamlMember.Setter = set_3_ColumnChart_DependentValueFontSize;
                break;
            case "MyUWPToolkit.ColumnChart.GridLineBrush":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "GridLineBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ColumnChart_GridLineBrush;
                xamlMember.Setter = set_4_ColumnChart_GridLineBrush;
                break;
            case "MyUWPToolkit.ColumnChart.IndependentValueBrush":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IndependentValueBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_ColumnChart_IndependentValueBrush;
                xamlMember.Setter = set_5_ColumnChart_IndependentValueBrush;
                break;
            case "MyUWPToolkit.ColumnChart.DependentValuePath":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "DependentValuePath", "String");
                xamlMember.Getter = get_6_ColumnChart_DependentValuePath;
                xamlMember.Setter = set_6_ColumnChart_DependentValuePath;
                break;
            case "MyUWPToolkit.ColumnChart.IndependentValuePath":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IndependentValuePath", "String");
                xamlMember.Getter = get_7_ColumnChart_IndependentValuePath;
                xamlMember.Setter = set_7_ColumnChart_IndependentValuePath;
                break;
            case "MyUWPToolkit.ColumnChart.ItemsSource":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColumnChart");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_ColumnChart_ItemsSource;
                xamlMember.Setter = set_8_ColumnChart_ItemsSource;
                break;
            case "MyUWPToolkit.CropImageControl.SourceImageFile":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.CropImageControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "SourceImageFile", "Windows.Storage.StorageFile");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_CropImageControl_SourceImageFile;
                xamlMember.Setter = set_9_CropImageControl_SourceImageFile;
                break;
            case "MyUWPToolkit.CropImageControl.CropSelection":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.CropImageControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "CropSelection", "MyUWPToolkit.CropSelection");
                xamlMember.Getter = get_10_CropImageControl_CropSelection;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.CropImageControl.CropAspectRatio":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.CropImageControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "CropAspectRatio", "MyUWPToolkit.AspectRatio");
                xamlMember.Getter = get_11_CropImageControl_CropAspectRatio;
                xamlMember.Setter = set_11_CropImageControl_CropAspectRatio;
                break;
            case "MyUWPToolkit.CropImageControl.DefaultCropSelectionSize":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.CropImageControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "DefaultCropSelectionSize", "MyUWPToolkit.CropSelectionSize");
                xamlMember.Getter = get_12_CropImageControl_DefaultCropSelectionSize;
                xamlMember.Setter = set_12_CropImageControl_DefaultCropSelectionSize;
                break;
            case "MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter.No1":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "No1", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_CropImageControlLineCoordinateConverter_No1;
                xamlMember.Setter = set_13_CropImageControlLineCoordinateConverter_No1;
                break;
            case "MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter.No2":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.Converters.CropImageControlLineCoordinateConverter");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "No2", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_CropImageControlLineCoordinateConverter_No2;
                xamlMember.Setter = set_14_CropImageControlLineCoordinateConverter_No2;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGridItem.FrozenColumnsItemTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGridItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenColumnsItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_FlexGridItem_FrozenColumnsItemTemplate;
                xamlMember.Setter = set_15_FlexGridItem_FrozenColumnsItemTemplate;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGridItem.FrozenColumnsVisibility":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGridItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenColumnsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_FlexGridItem_FrozenColumnsVisibility;
                xamlMember.Setter = set_16_FlexGridItem_FrozenColumnsVisibility;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.ScrollViewer":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ScrollViewer", "Windows.UI.Xaml.Controls.ScrollViewer");
                xamlMember.Getter = get_17_FlexGrid_ScrollViewer;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.FrozenColumnsHeaderItemsSource":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenColumnsHeaderItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_FlexGrid_FrozenColumnsHeaderItemsSource;
                xamlMember.Setter = set_18_FlexGrid_FrozenColumnsHeaderItemsSource;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.ColumnsHeaderItemsSource":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ColumnsHeaderItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_FlexGrid_ColumnsHeaderItemsSource;
                xamlMember.Setter = set_19_FlexGrid_ColumnsHeaderItemsSource;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.FrozenColumnsHeaderItemTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenColumnsHeaderItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_FlexGrid_FrozenColumnsHeaderItemTemplate;
                xamlMember.Setter = set_20_FlexGrid_FrozenColumnsHeaderItemTemplate;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.ColumnsHeaderItemTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ColumnsHeaderItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_FlexGrid_ColumnsHeaderItemTemplate;
                xamlMember.Setter = set_21_FlexGrid_ColumnsHeaderItemTemplate;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.FrozenColumnsItemTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenColumnsItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_FlexGrid_FrozenColumnsItemTemplate;
                xamlMember.Setter = set_22_FlexGrid_FrozenColumnsItemTemplate;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.KeepHorizontalOffsetWhenItemsSourceChanged":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "KeepHorizontalOffsetWhenItemsSourceChanged", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_FlexGrid_KeepHorizontalOffsetWhenItemsSourceChanged;
                xamlMember.Setter = set_23_FlexGrid_KeepHorizontalOffsetWhenItemsSourceChanged;
                break;
            case "MyUWPToolkit.FlexGrid.FlexGrid.FrozenColumnsVisibility":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.FlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenColumnsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_FlexGrid_FrozenColumnsVisibility;
                xamlMember.Setter = set_24_FlexGrid_FrozenColumnsVisibility;
                break;
            case "MyUWPToolkit.FlexGrid.NewFlexGrid.ColumnHeaderFrozenCount":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.NewFlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ColumnHeaderFrozenCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_NewFlexGrid_ColumnHeaderFrozenCount;
                xamlMember.Setter = set_25_NewFlexGrid_ColumnHeaderFrozenCount;
                break;
            case "MyUWPToolkit.FlexGrid.NewFlexGrid.ScrollViewer":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.NewFlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ScrollViewer", "Windows.UI.Xaml.Controls.ScrollViewer");
                xamlMember.Getter = get_26_NewFlexGrid_ScrollViewer;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.FlexGrid.NewFlexGrid.ColumnsHeaderItemsSource":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.NewFlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ColumnsHeaderItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_NewFlexGrid_ColumnsHeaderItemsSource;
                xamlMember.Setter = set_27_NewFlexGrid_ColumnsHeaderItemsSource;
                break;
            case "MyUWPToolkit.FlexGrid.NewFlexGrid.FrozenRowsItemsSource":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.NewFlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenRowsItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_NewFlexGrid_FrozenRowsItemsSource;
                xamlMember.Setter = set_28_NewFlexGrid_FrozenRowsItemsSource;
                break;
            case "MyUWPToolkit.FlexGrid.NewFlexGrid.ColumnsHeaderItemTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.NewFlexGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ColumnsHeaderItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_NewFlexGrid_ColumnsHeaderItemTemplate;
                xamlMember.Setter = set_29_NewFlexGrid_ColumnsHeaderItemTemplate;
                break;
            case "MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader.FrozenCount":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FlexGrid.NewFlexGridColumnHeader");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FrozenCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_NewFlexGridColumnHeader_FrozenCount;
                xamlMember.Setter = set_30_NewFlexGridColumnHeader_FrozenCount;
                break;
            case "MyUWPToolkit.VirtualizedVariableSizedGridView.EmptyContent":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.VirtualizedVariableSizedGridView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_VirtualizedVariableSizedGridView_EmptyContent;
                xamlMember.Setter = set_31_VirtualizedVariableSizedGridView_EmptyContent;
                break;
            case "MyUWPToolkit.VirtualizedVariableSizedGridView.EmptyContentTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.VirtualizedVariableSizedGridView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_VirtualizedVariableSizedGridView_EmptyContentTemplate;
                xamlMember.Setter = set_32_VirtualizedVariableSizedGridView_EmptyContentTemplate;
                break;
            case "MyUWPToolkit.VirtualizedVariableSizedGridView.ResizeableItems":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.VirtualizedVariableSizedGridView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ResizeableItems", "MyUWPToolkit.ResizeableItems");
                xamlMember.Getter = get_33_VirtualizedVariableSizedGridView_ResizeableItems;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.ResizeableItem.Columns":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ResizeableItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Columns", "Int32");
                xamlMember.Getter = get_34_ResizeableItem_Columns;
                xamlMember.Setter = set_34_ResizeableItem_Columns;
                break;
            case "MyUWPToolkit.ResizeableItem.ItemWidth":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ResizeableItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ItemWidth", "Int32");
                xamlMember.Getter = get_35_ResizeableItem_ItemWidth;
                xamlMember.Setter = set_35_ResizeableItem_ItemWidth;
                break;
            case "MyUWPToolkit.ResizeableItem.Items":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ResizeableItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.List`1<MyUWPToolkit.Resizable>");
                xamlMember.Getter = get_36_ResizeableItem_Items;
                xamlMember.Setter = set_36_ResizeableItem_Items;
                break;
            case "MyUWPToolkit.Resizable.Width":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.Resizable");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Width", "Int32");
                xamlMember.Getter = get_37_Resizable_Width;
                xamlMember.Setter = set_37_Resizable_Width;
                break;
            case "MyUWPToolkit.Resizable.Height":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.Resizable");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Height", "Int32");
                xamlMember.Getter = get_38_Resizable_Height;
                xamlMember.Setter = set_38_Resizable_Height;
                break;
            case "MyUWPToolkit.ResizeableItem.Min":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ResizeableItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Min", "Double");
                xamlMember.Getter = get_39_ResizeableItem_Min;
                xamlMember.Setter = set_39_ResizeableItem_Min;
                break;
            case "MyUWPToolkit.ResizeableItem.Max":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ResizeableItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Max", "Double");
                xamlMember.Getter = get_40_ResizeableItem_Max;
                xamlMember.Setter = set_40_ResizeableItem_Max;
                break;
            case "MyUWPToolkit.VirtualizedVariableSizedGridView.VirtualizedVariableSizedGridViewItemTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.VirtualizedVariableSizedGridView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "VirtualizedVariableSizedGridViewItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemTemplate;
                xamlMember.Setter = set_41_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemTemplate;
                break;
            case "MyUWPToolkit.VirtualizedVariableSizedGridView.VirtualizedVariableSizedGridViewItemContainerStyle":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.VirtualizedVariableSizedGridView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "VirtualizedVariableSizedGridViewItemContainerStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemContainerStyle;
                xamlMember.Setter = set_42_VirtualizedVariableSizedGridView_VirtualizedVariableSizedGridViewItemContainerStyle;
                break;
            case "MyUWPToolkit.VirtualizedVariableSizedGridView.VirtualizedVariableSizedInternalGridViewContainerStyle":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.VirtualizedVariableSizedGridView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "VirtualizedVariableSizedInternalGridViewContainerStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_VirtualizedVariableSizedGridView_VirtualizedVariableSizedInternalGridViewContainerStyle;
                xamlMember.Setter = set_43_VirtualizedVariableSizedGridView_VirtualizedVariableSizedInternalGridViewContainerStyle;
                break;
            case "MyUWPToolkit.GroupListView.GroupHeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.GroupListView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "GroupHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_GroupListView_GroupHeaderTemplate;
                xamlMember.Setter = set_44_GroupListView_GroupHeaderTemplate;
                break;
            case "MyUWPToolkit.GroupListView1.GroupHeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.GroupListView1");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "GroupHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_GroupListView1_GroupHeaderTemplate;
                xamlMember.Setter = set_45_GroupListView1_GroupHeaderTemplate;
                break;
            case "MyUWPToolkit.GroupListViewItem.Header":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.GroupListViewItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_GroupListViewItem_Header;
                xamlMember.Setter = set_46_GroupListViewItem_Header;
                break;
            case "MyUWPToolkit.GroupListViewItem.HeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.GroupListViewItem");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_GroupListViewItem_HeaderTemplate;
                xamlMember.Setter = set_47_GroupListViewItem_HeaderTemplate;
                break;
            case "MyUWPToolkit.HightLightedRadioButton.HightLightedBackground":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.HightLightedRadioButton");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HightLightedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_HightLightedRadioButton_HightLightedBackground;
                xamlMember.Setter = set_48_HightLightedRadioButton_HightLightedBackground;
                break;
            case "MyUWPToolkit.HightLightedRadioButton.HightLightedForeground":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.HightLightedRadioButton");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HightLightedForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_HightLightedRadioButton_HightLightedForeground;
                xamlMember.Setter = set_49_HightLightedRadioButton_HightLightedForeground;
                break;
            case "MyUWPToolkit.Converters.VisibilityConverter.IsReversed":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.Converters.VisibilityConverter");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsReversed", "Boolean");
                xamlMember.Getter = get_50_VisibilityConverter_IsReversed;
                xamlMember.Setter = set_50_VisibilityConverter_IsReversed;
                break;
            case "MyUWPToolkit.Converters.VisibilityConverter.IsInversed":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.Converters.VisibilityConverter");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsInversed", "Boolean");
                xamlMember.Getter = get_51_VisibilityConverter_IsInversed;
                xamlMember.Setter = set_51_VisibilityConverter_IsInversed;
                break;
            case "MyUWPToolkit.ImageTool.CropSelection":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ImageTool");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "CropSelection", "MyUWPToolkit.CropSelection");
                xamlMember.Getter = get_52_ImageTool_CropSelection;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.ImageTool.CropAspectRatio":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ImageTool");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "CropAspectRatio", "MyUWPToolkit.AspectRatio");
                xamlMember.Getter = get_53_ImageTool_CropAspectRatio;
                xamlMember.Setter = set_53_ImageTool_CropAspectRatio;
                break;
            case "MyUWPToolkit.ImageTool.DefaultCropSelectionSize":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ImageTool");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "DefaultCropSelectionSize", "MyUWPToolkit.CropSelectionSize");
                xamlMember.Getter = get_54_ImageTool_DefaultCropSelectionSize;
                xamlMember.Setter = set_54_ImageTool_DefaultCropSelectionSize;
                break;
            case "MyUWPToolkit.ImageTool.SourceImageFile":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ImageTool");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "SourceImageFile", "Windows.Storage.StorageFile");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_ImageTool_SourceImageFile;
                xamlMember.Setter = set_55_ImageTool_SourceImageFile;
                break;
            case "MyUWPToolkit.ImageTool.TempImageFile":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ImageTool");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "TempImageFile", "Windows.Storage.StorageFile");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_ImageTool_TempImageFile;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.ImageTool.EditImageSource":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ImageTool");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "EditImageSource", "Windows.UI.Xaml.Media.Imaging.WriteableBitmap");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_ImageTool_EditImageSource;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.ColorPicker.FlyoutWidth":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FlyoutWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_ColorPicker_FlyoutWidth;
                xamlMember.Setter = set_58_ColorPicker_FlyoutWidth;
                break;
            case "MyUWPToolkit.ColorPicker.FlyoutHeight":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FlyoutHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_ColorPicker_FlyoutHeight;
                xamlMember.Setter = set_59_ColorPicker_FlyoutHeight;
                break;
            case "MyUWPToolkit.ColorPicker.IsOpen":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.Getter = get_60_ColorPicker_IsOpen;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.ColorPicker.SelectedColor":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "SelectedColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_ColorPicker_SelectedColor;
                xamlMember.Setter = set_61_ColorPicker_SelectedColor;
                break;
            case "MyUWPToolkit.ColorPicker.PlacementTarget":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "PlacementTarget", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_ColorPicker_PlacementTarget;
                xamlMember.Setter = set_62_ColorPicker_PlacementTarget;
                break;
            case "MyUWPToolkit.ColorPicker.Placement":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Placement", "MyUWPToolkit.AdvancedFlyoutPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_ColorPicker_Placement;
                xamlMember.Setter = set_63_ColorPicker_Placement;
                break;
            case "MyUWPToolkit.ColorPicker.ArrowVisibility":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ArrowVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_ColorPicker_ArrowVisibility;
                xamlMember.Setter = set_64_ColorPicker_ArrowVisibility;
                break;
            case "MyUWPToolkit.ColorPicker.Owner":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Owner", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_ColorPicker_Owner;
                xamlMember.Setter = set_65_ColorPicker_Owner;
                break;
            case "MyUWPToolkit.ColorPicker.CurrentCustomColor":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "CurrentCustomColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_ColorPicker_CurrentCustomColor;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.ColorPicker.Title":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPicker");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_ColorPicker_Title;
                xamlMember.Setter = set_67_ColorPicker_Title;
                break;
            case "MyUWPToolkit.ColorPickerItemsControl.ColorPicker":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorPickerItemsControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ColorPicker", "MyUWPToolkit.ColorPicker");
                xamlMember.Getter = get_68_ColorPickerItemsControl_ColorPicker;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.ColorButton.Color":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorButton");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_ColorButton_Color;
                xamlMember.Setter = set_69_ColorButton_Color;
                break;
            case "MyUWPToolkit.ColorButton.IsSelected":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.ColorButton");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_ColorButton_IsSelected;
                xamlMember.Setter = set_70_ColorButton_IsSelected;
                break;
            case "MyUWPToolkit.AdvancedFlyoutBase.IsLightDismissEnabled":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.AdvancedFlyoutBase");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_AdvancedFlyoutBase_IsLightDismissEnabled;
                xamlMember.Setter = set_71_AdvancedFlyoutBase_IsLightDismissEnabled;
                break;
            case "MyUWPToolkit.AdvancedFlyoutBase.VerticalOffset":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.AdvancedFlyoutBase");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_AdvancedFlyoutBase_VerticalOffset;
                xamlMember.Setter = set_72_AdvancedFlyoutBase_VerticalOffset;
                break;
            case "MyUWPToolkit.AdvancedFlyoutBase.HorizontalOffset":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.AdvancedFlyoutBase");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_AdvancedFlyoutBase_HorizontalOffset;
                xamlMember.Setter = set_73_AdvancedFlyoutBase_HorizontalOffset;
                break;
            case "MyUWPToolkit.AdvancedFlyoutBase.Placement":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.AdvancedFlyoutBase");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Placement", "MyUWPToolkit.AdvancedFlyoutPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_AdvancedFlyoutBase_Placement;
                xamlMember.Setter = set_74_AdvancedFlyoutBase_Placement;
                break;
            case "MyUWPToolkit.AdvancedFlyoutBase.AttachedFlyout":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.AdvancedFlyoutBase");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "AttachedFlyout", "MyUWPToolkit.AdvancedFlyoutBase");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_75_AdvancedFlyoutBase_AttachedFlyout;
                xamlMember.Setter = set_75_AdvancedFlyoutBase_AttachedFlyout;
                break;
            case "MyUWPToolkit.AdvancedFlyout.Content":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.AdvancedFlyout");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_76_AdvancedFlyout_Content;
                xamlMember.Setter = set_76_AdvancedFlyout_Content;
                break;
            case "MyUWPToolkit.AdvancedFlyout.FlyoutPresenterStyle":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.AdvancedFlyout");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "FlyoutPresenterStyle", "Windows.UI.Xaml.Style");
                xamlMember.Getter = get_77_AdvancedFlyout_FlyoutPresenterStyle;
                xamlMember.Setter = set_77_AdvancedFlyout_FlyoutPresenterStyle;
                break;
            case "MyUWPToolkit.NumericTextBox.ValueFormat":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericTextBox");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ValueFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_NumericTextBox_ValueFormat;
                xamlMember.Setter = set_78_NumericTextBox_ValueFormat;
                break;
            case "MyUWPToolkit.NumericTextBox.Minimum":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericTextBox");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_NumericTextBox_Minimum;
                xamlMember.Setter = set_79_NumericTextBox_Minimum;
                break;
            case "MyUWPToolkit.NumericTextBox.Maximum":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericTextBox");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_NumericTextBox_Maximum;
                xamlMember.Setter = set_80_NumericTextBox_Maximum;
                break;
            case "MyUWPToolkit.NumericTextBox.Value":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericTextBox");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_NumericTextBox_Value;
                xamlMember.Setter = set_81_NumericTextBox_Value;
                break;
            case "MyUWPToolkit.TransparentBackground.SquareWidth":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.TransparentBackground");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "SquareWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_TransparentBackground_SquareWidth;
                xamlMember.Setter = set_82_TransparentBackground_SquareWidth;
                break;
            case "MyUWPToolkit.TransparentBackground.SquareBrush":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.TransparentBackground");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "SquareBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_TransparentBackground_SquareBrush;
                xamlMember.Setter = set_83_TransparentBackground_SquareBrush;
                break;
            case "MyUWPToolkit.TransparentBackground.AlternatingSquareBrush":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.TransparentBackground");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "AlternatingSquareBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_TransparentBackground_AlternatingSquareBrush;
                xamlMember.Setter = set_84_TransparentBackground_AlternatingSquareBrush;
                break;
            case "MyUWPToolkit.NumericUpDown.Header":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericUpDown");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_NumericUpDown_Header;
                xamlMember.Setter = set_85_NumericUpDown_Header;
                break;
            case "MyUWPToolkit.NumericUpDown.HeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericUpDown");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_NumericUpDown_HeaderTemplate;
                xamlMember.Setter = set_86_NumericUpDown_HeaderTemplate;
                break;
            case "MyUWPToolkit.NumericUpDown.ValueFormat":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericUpDown");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ValueFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_NumericUpDown_ValueFormat;
                xamlMember.Setter = set_87_NumericUpDown_ValueFormat;
                break;
            case "MyUWPToolkit.NumericUpDown.ValueBarVisibility":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericUpDown");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ValueBarVisibility", "MyUWPToolkit.NumericUpDownValueBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_NumericUpDown_ValueBarVisibility;
                xamlMember.Setter = set_88_NumericUpDown_ValueBarVisibility;
                break;
            case "MyUWPToolkit.NumericUpDown.IsReadOnly":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericUpDown");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_NumericUpDown_IsReadOnly;
                xamlMember.Setter = set_89_NumericUpDown_IsReadOnly;
                break;
            case "MyUWPToolkit.NumericUpDown.DragSpeed":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.NumericUpDown");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "DragSpeed", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_NumericUpDown_DragSpeed;
                xamlMember.Setter = set_90_NumericUpDown_DragSpeed;
                break;
            case "MyUWPToolkit.FrameworkElementExtensions.SystemCursor":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FrameworkElementExtensions");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "SystemCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_91_FrameworkElementExtensions_SystemCursor;
                xamlMember.Setter = set_91_FrameworkElementExtensions_SystemCursor;
                break;
            case "MyUWPToolkit.FrameworkElementExtensions.AllChildren":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FrameworkElementExtensions");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "AllChildren", "System.Collections.Generic.List`1<Windows.UI.Xaml.UIElement>");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_92_FrameworkElementExtensions_AllChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "MyUWPToolkit.FrameworkElementExtensions.ClipToBounds":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FrameworkElementExtensions");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_93_FrameworkElementExtensions_ClipToBounds;
                xamlMember.Setter = set_93_FrameworkElementExtensions_ClipToBounds;
                break;
            case "MyUWPToolkit.FrameworkElementExtensions.ClipToBoundsHandler":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FrameworkElementExtensions");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ClipToBoundsHandler", "MyUWPToolkit.ClipToBoundsHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_94_FrameworkElementExtensions_ClipToBoundsHandler;
                xamlMember.Setter = set_94_FrameworkElementExtensions_ClipToBoundsHandler;
                break;
            case "MyUWPToolkit.FrameworkElementExtensions.Cursor":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FrameworkElementExtensions");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Cursor", "Windows.UI.Core.CoreCursor");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_95_FrameworkElementExtensions_Cursor;
                xamlMember.Setter = set_95_FrameworkElementExtensions_Cursor;
                break;
            case "MyUWPToolkit.FrameworkElementExtensions.CursorDisplayHandler":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.FrameworkElementExtensions");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "CursorDisplayHandler", "MyUWPToolkit.CursorDisplayHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_96_FrameworkElementExtensions_CursorDisplayHandler;
                xamlMember.Setter = set_96_FrameworkElementExtensions_CursorDisplayHandler;
                break;
            case "MyUWPToolkit.PullToRefreshControl.HeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_PullToRefreshControl_HeaderTemplate;
                xamlMember.Setter = set_97_PullToRefreshControl_HeaderTemplate;
                break;
            case "MyUWPToolkit.PullToRefreshControl.RefreshThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "RefreshThreshold", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_PullToRefreshControl_RefreshThreshold;
                xamlMember.Setter = set_98_PullToRefreshControl_RefreshThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshControl.IsReachThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsReachThreshold", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_PullToRefreshControl_IsReachThreshold;
                xamlMember.Setter = set_99_PullToRefreshControl_IsReachThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshGrid.HeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_PullToRefreshGrid_HeaderTemplate;
                xamlMember.Setter = set_100_PullToRefreshGrid_HeaderTemplate;
                break;
            case "MyUWPToolkit.PullToRefreshGrid.RefreshThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "RefreshThreshold", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_PullToRefreshGrid_RefreshThreshold;
                xamlMember.Setter = set_101_PullToRefreshGrid_RefreshThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshGrid.IsReachThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsReachThreshold", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_PullToRefreshGrid_IsReachThreshold;
                xamlMember.Setter = set_102_PullToRefreshGrid_IsReachThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshGrid.LastRefreshTime":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "LastRefreshTime", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_PullToRefreshGrid_LastRefreshTime;
                xamlMember.Setter = set_103_PullToRefreshGrid_LastRefreshTime;
                break;
            case "MyUWPToolkit.PullToRefreshGrid1.HeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid1");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_PullToRefreshGrid1_HeaderTemplate;
                xamlMember.Setter = set_104_PullToRefreshGrid1_HeaderTemplate;
                break;
            case "MyUWPToolkit.PullToRefreshGrid1.RefreshThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid1");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "RefreshThreshold", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_PullToRefreshGrid1_RefreshThreshold;
                xamlMember.Setter = set_105_PullToRefreshGrid1_RefreshThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshGrid1.IsReachThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid1");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsReachThreshold", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_PullToRefreshGrid1_IsReachThreshold;
                xamlMember.Setter = set_106_PullToRefreshGrid1_IsReachThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshGrid1.LastRefreshTime":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshGrid1");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "LastRefreshTime", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_PullToRefreshGrid1_LastRefreshTime;
                xamlMember.Setter = set_107_PullToRefreshGrid1_LastRefreshTime;
                break;
            case "MyUWPToolkit.PullToRefreshPanel.HeaderTemplate":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshPanel");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_PullToRefreshPanel_HeaderTemplate;
                xamlMember.Setter = set_108_PullToRefreshPanel_HeaderTemplate;
                break;
            case "MyUWPToolkit.PullToRefreshPanel.RefreshThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshPanel");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "RefreshThreshold", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_PullToRefreshPanel_RefreshThreshold;
                xamlMember.Setter = set_109_PullToRefreshPanel_RefreshThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshPanel.IsReachThreshold":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshPanel");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "IsReachThreshold", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_PullToRefreshPanel_IsReachThreshold;
                xamlMember.Setter = set_110_PullToRefreshPanel_IsReachThreshold;
                break;
            case "MyUWPToolkit.PullToRefreshPanel.LastRefreshTime":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshPanel");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "LastRefreshTime", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_PullToRefreshPanel_LastRefreshTime;
                xamlMember.Setter = set_111_PullToRefreshPanel_LastRefreshTime;
                break;
            case "MyUWPToolkit.PullToRefreshBorder.myAvailableSize":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshBorder");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "myAvailableSize", "Windows.Foundation.Size");
                xamlMember.Getter = get_112_PullToRefreshBorder_myAvailableSize;
                xamlMember.Setter = set_112_PullToRefreshBorder_myAvailableSize;
                break;
            case "MyUWPToolkit.PullToRefreshBorder.myFinalSize":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.PullToRefreshBorder");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "myFinalSize", "Windows.Foundation.Size");
                xamlMember.Getter = get_113_PullToRefreshBorder_myFinalSize;
                xamlMember.Setter = set_113_PullToRefreshBorder_myFinalSize;
                break;
            case "MyUWPToolkit.VariableSizedGridView.ResizeableItem":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyUWPToolkit.VariableSizedGridView");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ResizeableItem", "MyUWPToolkit.ResizeableItem");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_VariableSizedGridView_ResizeableItem;
                xamlMember.Setter = set_114_VariableSizedGridView_ResizeableItem;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Device":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Device", "Microsoft.Graphics.Canvas.CanvasDevice");
                xamlMember.Getter = get_115_CanvasControl_Device;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Dpi":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Dpi", "Single");
                xamlMember.Getter = get_116_CanvasControl_Dpi;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.UseSharedDevice":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "UseSharedDevice", "Boolean");
                xamlMember.Getter = get_117_CanvasControl_UseSharedDevice;
                xamlMember.Setter = set_117_CanvasControl_UseSharedDevice;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ForceSoftwareRenderer":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ForceSoftwareRenderer", "Boolean");
                xamlMember.Getter = get_118_CanvasControl_ForceSoftwareRenderer;
                xamlMember.Setter = set_118_CanvasControl_ForceSoftwareRenderer;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.DpiScale":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "DpiScale", "Single");
                xamlMember.Getter = get_119_CanvasControl_DpiScale;
                xamlMember.Setter = set_119_CanvasControl_DpiScale;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.CustomDevice":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "CustomDevice", "Microsoft.Graphics.Canvas.CanvasDevice");
                xamlMember.Getter = get_120_CanvasControl_CustomDevice;
                xamlMember.Setter = set_120_CanvasControl_CustomDevice;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ClearColor":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ClearColor", "Windows.UI.Color");
                xamlMember.Getter = get_121_CanvasControl_ClearColor;
                xamlMember.Setter = set_121_CanvasControl_ClearColor;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.ReadyToDraw":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "ReadyToDraw", "Boolean");
                xamlMember.Getter = get_122_CanvasControl_ReadyToDraw;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl.Size":
                userType = (global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl");
                xamlMember = new global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlMember(this, "Size", "Windows.Foundation.Size");
                xamlMember.Getter = get_123_CanvasControl_Size;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlSystemBaseType
    {
        global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MyUWPToolkit.MyUWPToolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

